version: '3.7'

services:
  ######################################################################

  # docker-compose -f ./dev.docker-compose.yml stop gestor-2.0-backend
  # docker-compose -f ./dev.docker-compose.yml rm -f gestor-2.0-backend
  # docker-compose -f ./dev.docker-compose.yml up --build gestor-2.0-backend
  # docker-compose -f ./dev.docker-compose.yml start gestor-2.0-backend
  # docker-compose -f ./dev.docker-compose.yml logs -f --tail="5000" gestor-2.0-backend

  gestor-2.0-backend:
    container_name: gestor-2.0-backend
    build:
      context: .
      target: development
      dockerfile: ./dev/backend.dockerfile
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 8080:8080
    command: npm run start:dev
    environment:
      - DATABASE_URL=mysql://root:root@gestor-2.0-database:3306/gestor-2.0?useTimezone=true&serverTimezone=UTC&connection_limit=15&socket_timeout=5
      - NODE_ENV=development

  ######################################################################

  # docker-compose -f ./dev.docker-compose.yml stop gestor-2.0-database
  # docker-compose -f ./dev.docker-compose.yml rm -f gestor-2.0-database
  # docker-compose -f ./dev.docker-compose.yml up --build gestor-2.0-database
  # docker-compose -f ./dev.docker-compose.yml start -d gestor-2.0-database
  # docker-compose -f ./dev.docker-compose.yml logs -f --tail="5000" gestor-2.0-database

  gestor-2.0-database:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dev/database.dockerfile
    image: gestor-2.0-mysql-database
    container_name: gestor-2.0-database
    environment:
      - ENV_PORT=3307
      - ENV_MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - ENV_MYSQL_ROOT_PASSWORD=root
    ports:
      - 3307:3306